async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Привет!\n'
                                    '<b>1.</b> Что случилось?\n'
                                    '<b>2.</b> Что случилось?\n \n'
                                    'Отправьте мне всё <b>одним сообщением</b> и я <b>анонимно</b>'
                                    ' переправлю его <u>организаторам</u>', parse_mode='HTML')


async def forward_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat.type == 'private':
        logger.info("Forwarding text message")
        await context.bot.send_message(chat_id=ORGANIZERS_CHAT_ID,
                                       text=f"<b>Анонимный запрос:</b>\n<u>{update.message.text}</u>",
                                       parse_mode='HTML')


async def forward_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat.type == 'private':
        photos = update.message.photo
        number_of_photos = len(update.message.photo)

        if photos:
            if number_of_photos == 1:
                logger.info("Forwarding photo SINGLE SAD PHOTO")
                photo = photos[-1]
                # Select the highest resolution photo
                await context.bot.send_photo(chat_id=ORGANIZERS_CHAT_ID, photo=photo.file_id,
                                             caption=f"<b>Анонимный запрос:</b>\n<u>{update.message.caption}</u>",
                                             parse_mode='HTML')
            elif number_of_photos > 1:
                logging.info("we think THERE ARE SEVERAL PHOTOS")
                # Create a list of InputMediaPhoto, but leave the last one for the caption
                media_group = [InputMediaPhoto(photo.file_id) for photo in photos[:-1]]
                # Add the last photo with a caption (if exists)
                logging.info("created a MEDIA GROUP")
                last_photo = InputMediaPhoto(photos[-1].file_id,
                                             caption=f"<b>Анонимный запрос:</b>\n<u>{update.message.caption}</u>",
                                             parse_mode='HTML')
                media_group.append(last_photo)

                logger.info(f"Forwarding {len(media_group)} photos as an album with caption.")
                await context.bot.send_media_group(chat_id=ORGANIZERS_CHAT_ID, media=media_group)


async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text

    # Check if the message is a direct message (private chat)
    if update.message.chat.type == 'private':
        if update.message.photo:
            # Get the highest resolution photo (last in the list)
            logger.info("Received photo to forward")
            photos = [InputMediaPhoto(photo.file_id) for photo in update.message.photo]
            await context.bot.send_media_group(chat_id=ORGANIZERS_CHAT_ID, media=photos)
            # If there is also text, send it separately
            if user_message:
                await context.bot.send_message(chat_id=ORGANIZERS_CHAT_ID,
                                               text=f"<b>Анонимный запрос:</b>\n<u>{user_message}</u>",
                                               parse_mode='HTML')
        elif user_message:  # No photos, just text
            await context.bot.send_message(chat_id=ORGANIZERS_CHAT_ID,
                                           text=f"<b>Анонимное сообщение:</b>\n<u>{user_message}</u>",
                                           parse_mode='HTML')


    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_message()))
